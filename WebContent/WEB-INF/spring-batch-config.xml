<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd">

    <context:annotation-config />
    <context:component-scan base-package="jobs" />

	<!-- <bean id="myAsyncUncaughtExceptionHandler" class="jobs.MyAsyncUncaughtExceptionHandler" /> -->
	<bean id="myAsyncUncaughtExceptionHandler" class="exceptions.MyAsyncUncaughtExceptionHandler" />

	<task:annotation-driven executor="batchTaskExecutor" scheduler="scheduling" exception-handler="myAsyncUncaughtExceptionHandler" />

	<!-- By default when specifying @Async on a method, the executor that will be used is the one supplied to the 'annotation-driven' -->
	<!-- the value attribute of the @Async annotation can be used when needing to indicate that an executor other than the default should be used -->
	<!-- set up a default executor -->
	<task:executor id="batchTaskExecutor" pool-size="03" queue-capacity="05" rejection-policy="CALLER_RUNS" keep-alive="900" />
	<!-- <task:executor id="executorWithPoolSizeRange" pool-size="5-25" queue-capacity="100" rejection-policy="DISCARD" keep-alive="3600" /> -->
	<task:scheduler id="scheduling" pool-size="03" />

	<task:scheduled-tasks scheduler="scheduling">
		<!-- new CronTrigger("* 15 9-17 * * MON-FRI") -->
		<!-- java.lang.IllegalArgumentException: Cron expression must consist of 6 fields (found 7 in "0 00 0 1 APR,MAY,JUN ? 2018") -->

  		<!-- <task:scheduled ref="jobs" method="clear_ussd" cron="0 */5 * ? * *" /> -->
  		<!-- <task:scheduled ref="jobs" method="clear_ussd" fixed-delay="900000" /> -->
  		<task:scheduled ref="jobs" method="clear_ussd" fixed-delay="720000" />
  		<!-- <task:scheduled ref="jobs" method="clear_ussd" fixed-rate="300000" /> -->

		<!-- <task:scheduled ref="jobs" method="clean_delivery_notification_for_sms" cron="0 30 01 ? * *" /> -->
		<!-- <task:scheduled ref="jobs" method="vacuum_analyze" cron="0 0 06,14,22 ? * *" /> -->
  		<!-- <task:scheduled ref="jobs" method="clear_sharing" cron="0 00 0 1 APR,MAY,JUN,JUL,AUG,SEP,OCT ?" /> -->
  		<task:scheduled ref="jobs" method="clear_sharing" cron="0 00/12 * 1 * ?" />
	</task:scheduled-tasks>

    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />
    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" p:transactionManager-ref="transactionManager" />
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher" p:jobRepository-ref="jobRepository" p:taskExecutor-ref="batchTaskExecutor" />

	<!-- <batch:job id="cleanExpiredUssdRequestJob">
	  <batch:step id="cleanUssdRequest">
	  	<batch:tasklet ref="cleanExpiredUssdRequestTasklet" transaction-manager="transactionManager" />
	  </batch:step>
	</batch:job> -->
	<batch:job id="cleanExpiredUssdRequestJob">
	  <batch:step id="cleanUssdRequest">
	  	<!-- <batch:tasklet ref="cleanExpiredUssdRequestTasklet" transaction-manager="transactionManager" /> -->
	  	<batch:tasklet transaction-manager="transactionManager">
          <bean class="jobs.CleanExpiredUssdRequestAndMonitoringTasklet">
     		<property name="productProperties" ref="productProperties" />
     		<property name="dao" ref="dao" />
     	  </bean>
	  	</batch:tasklet>
	  </batch:step>
	</batch:job>

	<batch:job id="cleanDataSharingJob">
	  <batch:listeners>
      	<!-- <batch:listener>
          <bean class="jobs.listeners.JobPhaseEventListener" />
        </batch:listener> -->
        <batch:listener ref="jobPhaseEventListener" />
  	  </batch:listeners>

	  <batch:step id="cleanDataSharing">
	  	<!-- <batch:tasklet ref="cleanDataSharingTasklet" transaction-manager="transactionManager" /> -->
	  	<batch:tasklet transaction-manager="transactionManager">
          <bean class="jobs.CleanDataSharingTasklet">
     		<property name="productProperties" ref="productProperties" />
     		<property name="dao" ref="dao" />
     	  </bean>
		  <!-- Intercepting Step Execution -->
		  <!-- Just as with the Job, there are many events during the execution of a Step where a user may need to perform some functionality.
		  This can be accomplished with one of many Step scoped listeners. -->
    	  <batch:listeners>
    	    <batch:listener ref="jobRunListener" />
    	  </batch:listeners>
	    </batch:tasklet>
	  </batch:step>
	</batch:job>

	<!-- Job scope, introduced in Spring Batch 3.0 is similar to Step scope in configuration but is a Scope for the Job context so there is only one instance of such a bean per executing job.
	Additionally, support is provided for late binding of references accessible from the JobContext using #{..} placeholders. Using this feature, bean properties can be pulled from the job or job execution context and the job parameters. -->
	<!-- Because it is not part of the Spring container by default, the scope must be added explicitly, either by using the batch namespace:
	Or by including a bean definition explicitly for the JobScope <bean class="org.springframework.batch.core.scope.JobScope" /> (but not both): -->
	<bean id="jobPhaseEventListener" class="jobs.listeners.JobPhaseEventListener" scope="job">
		<property name="productProperties" ref="productProperties" />

    	<!-- <property name="name" value="#{jobParameters['input']}" /> -->
    	<!-- <property name="name" value="#{jobExecutionContext['input.name']}.txt" /> -->
	</bean>

	<!-- Using a scope of Step is required in order to use late binding since the bean cannot actually be instantiated until the Step starts, which allows the attributes to be found.
	Because it is not part of the Spring container by default, the scope must be added explicitly, either by using the batch namespace:
	or by including a bean definition explicitly for the StepScope <bean class="org.springframework.batch.core.scope.StepScope" /> (but not both): -->
    <bean id="jobRunListener" class="jobs.listeners.JobRunListener" scope="step">
      <property name="dao" ref="dao" />
      <property name="productProperties" ref="productProperties" />
	  
      <!-- <property name="resource" value="#{stepExecutionContext['input.file.name']}" />
      <property name="resource" value="#{jobExecutionContext['input.file.name']}" /> -->
    </bean>

</beans>